!function() {
    "use strict";
    function AddBillController($state, dataAccessService, SalesService, constants, alertMessage, messages) {
        function BillItem() {
            this.product = "", this.units = 1, this.weights = [ 0 ], this.rate = 0, this.brand = "";
        }
        function saveBill(form) {
            dataAccessService.feed("/api/post/add/bill", vm.billDetails).then(function(response) {
                vm.alertService.addAlert("success", messages.successMsgs.ITEM_ADDED), resetBill(form);
            }, function(error) {
                vm.alertService.addAlert("danger", messages.errorMsgs.ITEM_ADDED);
            });
        }
        function resetBill(form) {
            vm.billDetails.billItems = [ new BillItem() ], form.$setValidity(), form.$setPristine(), 
            form.$setUntouched();
        }
        function addNewRow() {
            vm.billDetails.billItems.push(new BillItem());
        }
        function removeRow(index) {
            vm.billDetails.billItems.splice(index, 1);
        }
        function calculate() {
            SalesService.calculateBill(vm.billDetails);
        }
        function activate(params) {
            calculate();
        }
        var vm = this;
        vm.billDetails = {}, vm.billDetails.billDate = new Date(), vm.billDetails.labourCharge = 0, 
        vm.billDetails.lavy = 0, vm.billDetails.billItems = [ new BillItem() ], vm.saveBill = saveBill, 
        vm.resetBill = resetBill, vm.getCustomers = SalesService.getCustomers, vm.getProducts = SalesService.getProducts, 
        vm.addNewWeightRow = SalesService.addNewWeightRow, vm.removeWeightRow = SalesService.removeWeightRow, 
        vm.alertService = alertMessage, vm.addNewRow = addNewRow, vm.removeRow = removeRow, 
        vm.calculate = calculate, activate();
    }
    angular.module("myShopApp").controller("AddBillController", AddBillController), 
    AddBillController.$inject = [ "$state", "dataAccessService", "SalesService", "constants", "alertMessage", "messages" ];
}(), function() {
    "use strict";
    function EditBillController($state, dataAccessService, SalesService, constants, alertMessage, messages, billItem) {
        function BillItem() {
            this.product = "", this.units = 1, this.weights = [ 0 ], this.rate = 0;
        }
        function updateBill() {
            dataAccessService.update("/api/put/update/bill", vm.billDetails).then(function(response) {
                vm.alertService.addAlert("success", messages.successMsgs.ITEM_ADDED), $state.go("main.sales.listBill");
            }, function(error) {
                vm.alertService.addAlert("danger", messages.errorMsgs.ITEM_ADDED);
            });
        }
        function cancelUpdate() {
            $state.go("main.sales.listBill");
        }
        function addNewRow() {
            vm.billDetails.billItems.push(new BillItem());
        }
        function removeRow(index) {
            vm.billDetails.billItems.splice(index, 1);
        }
        function calculate() {
            SalesService.calculateBill(vm.billDetails);
        }
        function activate(params) {
            calculate(), vm.billDetails.billDate = new Date(vm.billDetails.billDate);
        }
        var vm = this;
        vm.billDetails = billItem, vm.updateBill = updateBill, vm.cancelUpdate = cancelUpdate, 
        vm.getCustomers = SalesService.getCustomers, vm.getProducts = SalesService.getProducts, 
        vm.addNewWeightRow = SalesService.addNewWeightRow, vm.removeWeightRow = SalesService.removeWeightRow, 
        vm.alertService = alertMessage, vm.addNewRow = addNewRow, vm.removeRow = removeRow, 
        vm.calculate = calculate, activate();
    }
    angular.module("myShopApp").controller("EditBillController", EditBillController), 
    EditBillController.$inject = [ "$state", "dataAccessService", "SalesService", "constants", "alertMessage", "messages", "billItem" ];
}(), function() {
    "use strict";
    function ListBillController(bills, $location) {
        function editBill(billId) {
            $location.path("/main/sales/editbill/" + billId);
        }
        function activate() {
            vm.bills = bills;
        }
        var vm = this;
        vm.editBill = editBill, activate();
    }
    angular.module("myShopApp").controller("ListBillController", ListBillController), 
    ListBillController.$inject = [ "bills", "$location" ];
}(), function() {
    "use strict";
    function ViewBillController(bills, $location) {
        function editBill(billId) {
            $location.path("/main/bills/edit/" + billId);
        }
        function activate() {
            vm.bills = bills;
        }
        var vm = this;
        vm.editBill = editBill, activate();
    }
    angular.module("myShopApp").controller("ViewBillController", ViewBillController), 
    ViewBillController.$inject = [ "bills", "$location" ];
}(), function() {
    "use strict";
    function DashboardSalesController(dataAccessService) {
        function activate() {
            dataAccessService.fetch("/api/get/count/bill").then(function(count) {
                vm.billCount = count;
            });
        }
        var vm = this;
        activate();
    }
    angular.module("myShopApp").controller("DashboardSalesController", DashboardSalesController), 
    DashboardSalesController.inject = [ "dataAccessService" ];
}(), function() {
    "use strict";
    function billBodyDirective() {
        var directive = {
            restrict: "E",
            templateUrl: "bill-body.html"
        };
        return directive;
    }
    angular.module("myShopApp").directive("billBody", billBodyDirective), billBodyDirective.inject = [];
}(), function() {
    "use strict";
    function SalesService(dataAccessService, constants) {
        function calculateLavy(billDetails) {
            for (var totalWeight = 0, index = 0; index < billDetails.weights.length; index++) totalWeight += billDetails.weights[index];
            totalWeight < 25 ? billDetails.lavy = "" : condition || condition || condition;
        }
        function addNewWeightRow(currentItem) {
            currentItem.weights.push(0);
        }
        function removeWeightRow(currentItem, index) {
            currentItem.weights.splice(index, 1);
        }
        function calculateBill(billDetails) {
            billDetails.grandTotal = 0;
            for (var index = 0; index < billDetails.billItems.length; index++) {
                var item = billDetails.billItems[index];
                if (item.total = 0, !isNaN(item.rate) && !isNaN(item.units)) {
                    for (var weightIndex = 0; weightIndex < item.weights.length; weightIndex++) item.weights[weightIndex] && (item.total += Math.round(item.rate * item.weights[weightIndex] * 100) / 100);
                    billDetails.grandTotal += item.total;
                }
            }
            billDetails.grandTotal && (billDetails.lavy = constants.LAVY, billDetails.labourCharge = Math.round(constants.LABOUR_CHARGE_PERCENTAGE / 100 * billDetails.grandTotal * 100) / 100, 
            billDetails.grandTotal += billDetails.lavy + billDetails.labourCharge);
        }
        function getCustomers(val) {
            return dataAccessService.fetch("/api/get/find/customer/" + val).then(function(customers) {
                return customers;
            });
        }
        function getProducts(val) {
            return dataAccessService.fetch("/api/get/find/product/" + val).then(function(products) {
                return products;
            });
        }
        this.calculateBill = calculateBill, this.getCustomers = getCustomers, this.getProducts = getProducts, 
        this.calculateLavy = calculateLavy, this.addNewWeightRow = addNewWeightRow, this.removeWeightRow = removeWeightRow;
    }
    angular.module("myShopApp").service("SalesService", SalesService), SalesService.inject = [ "dataAccessService", "constants" ];
}();